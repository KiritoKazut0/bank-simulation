# 🏦 Sistema de Simulación Bancaria Concurrente

<p align="center">
  <img src="https://your-logo-url.com/logo.png" width="120" alt="Bank Simulation Logo" />
</p>

<p align="center">
  <a href="https://github.com/tu-usuario/bank-simulation" target="_blank"><img src="https://img.shields.io/github/stars/tu-usuario/bank-simulation?style=social" alt="GitHub Stars" /></a>
  <a href="https://github.com/tu-usuario/bank-simulation/issues" target="_blank"><img src="https://img.shields.io/github/issues/tu-usuario/bank-simulation" alt="Issues" /></a>
  <a href="https://github.com/tu-usuario/bank-simulation/blob/main/LICENSE" target="_blank"><img src="https://img.shields.io/github/license/tu-usuario/bank-simulation" alt="License" /></a>
</p>

## 📝 Descripción

Sistema que simula las operaciones de un banco con tres ventanillas, implementando programación concurrente en Python. Cada cliente es un hilo independiente que puede realizar depósitos o retiros, manteniendo la integridad del saldo bancario mediante mecanismos de sincronización.

## ✨ Características Principales

- 🔄 Simulación concurrente de operaciones bancarias
- 👥 Múltiples clientes operando simultáneamente
- 🏧 Tres ventanillas de servicio
- 💰 Control de saldo en tiempo real
- 🔒 Sincronización mediante primitivas de threading

## 🛠️ Tecnologías Utilizadas

- **Python 3.x**: Lenguaje de programación principal
- **Tkinter**: Interfaz gráfica de usuario
- **Threading**: Módulo para programación concurrente
  - Lock
  - Semaphore
  - Event

## 🏗️ Arquitectura del Sistema

### 🧩 Componentes Principales

#### 🧵 Hilos (Threads)

- **Cliente (Thread Principal)**
  - Representa cada cliente como un hilo independiente
  - Gestiona operaciones de depósito y retiro
  - Interactúa con las ventanillas disponibles

#### 🔐 Primitivas de Sincronización

1. **Lock**
   - Protege el acceso al saldo bancario
   - Previene condiciones de carrera
   - Asegura la integridad de las transacciones

2. **Semaphore(3)**
   - Controla el acceso a ventanillas
   - Limita a 3 clientes simultáneos
   - Gestiona la disponibilidad de servicio

3. **Event**
   - Señaliza ventanillas disponibles
   - Optimiza la cola de espera
   - Mejora la eficiencia del sistema

## 📁 Estructura del Proyecto

```bash
bank_simulation/
├── 📄 main.py           # Punto de entrada
├── 📄 concurrencia.py   # Lógica de concurrencia
├── 📄 vista.py          # Interfaz gráfica
├── 📄 assets/           # Imágenes y diagramas
├── 📄 README.md         # Documentación
```

## ⚙️ Requisitos Previos

```txt
Python 3.x
tkinter (incluido en Python)
```

## 🚀 Instalación y Ejecución

### 1️⃣ Clonar el repositorio

```bash
git clone https://github.com/tu-usuario/bank-simulation.git
cd bank-simulation
```

### 2️⃣ Ejecutar la aplicación

```bash
python main.py
```

## 💻 Uso

1. Inicia la aplicación
2. Usa los botones para crear nuevos clientes
3. Ingresa el monto para la transacción
4. Observa el estado de las ventanillas y el saldo en tiempo real

## 🛡️ Manejo de Excepciones

- ✅ Validación de montos negativos
- ✅ Control de saldo insuficiente
- ✅ Gestión de errores en hilos
- ✅ Sistema de logging completo

## ✍️ Autor

<p align="center">
  <a href="https://github.com/KiritoKazut0" target="_blank"><img src="https://img.shields.io/badge/GitHub-KiritoKazut0-blue?style=flat&logo=github" alt="GitHub Profile" /></a>
</p>

[Norberto Lopez](https://github.com/KiritoKazut0)

